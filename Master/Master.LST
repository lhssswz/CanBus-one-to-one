C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MASTER
OBJECT MODULE PLACED IN .\Master.obj
COMPILER INVOKED BY: D:\SoftPath\KEIL4\C51\BIN\C51.EXE ..\Master.c BROWSE DEBUG OBJECTEXTEND OBJECT(.\Master.obj)

line level    source

   1          #include  "stdio.h"
   2          #include  "string.h"
   3          #include  "intrins.h"
   4          #include  "reg51.h"
   5          
   6          //定义SJA1000的基址
   7          #define SJA_BaseAdr  0XFE00       //P2.0
   8          // 控制寄存器
   9          #define         REG_CONTROL       SJA_BaseAdr+0x00       //内部控制寄存器
  10          #define         REG_COMMAND       SJA_BaseAdr+0x01       //命令寄存器
  11          #define         REG_STATUS        SJA_BaseAdr+0x02       //状态寄存器
  12          #define         REG_INTERRUPT     SJA_BaseAdr+0x03       //中断寄存器
  13          #define         REG_INTENABLE     SJA_BaseAdr+0x04       //中断使能寄存器
  14          #define         REG_BTR0          SJA_BaseAdr+0x06       //总线定时寄存器0
  15          #define         REG_BTR1          SJA_BaseAdr+0x07       //总线定时寄存器1
  16          #define         REG_OCR           SJA_BaseAdr+0x08       //输出控制寄存器
  17          #define         REG_TEST          SJA_BaseAdr+0x09       //测试寄存器
  18          
  19          #define         REG_RESVER1       SJA_BaseAdr+0x0A       //保留1
  20          #define         REG_ARBITRATE     SJA_BaseAdr+0x0B       //仲裁丢失捕捉
  21          #define         REG_ERRCATCH      SJA_BaseAdr+0x0C       //错误代码捕捉
  22          #define         REG_ERRLIMIT      SJA_BaseAdr+0x0D       //错误报警限额
  23          
  24          #define         REG_RXERR         SJA_BaseAdr+0x0E         //接收错误计数器
  25          #define         REG_TXERR         SJA_BaseAdr+0x0F         //发送错误计数器
  26          
  27          #define         REG_ACR1          SJA_BaseAdr+0x10       //验收代码寄存器
  28          #define         REG_ACR2          SJA_BaseAdr+0x11       //验收代码寄存器
  29          #define         REG_ACR3          SJA_BaseAdr+0x12       //验收代码寄存器
  30          #define         REG_ACR4          SJA_BaseAdr+0x13       //验收代码寄存器
  31          #define         REG_AMR1          SJA_BaseAdr+0x14       //验收屏蔽寄存器
  32          #define         REG_AMR2          SJA_BaseAdr+0x15       //验收屏蔽寄存器
  33          #define         REG_AMR3          SJA_BaseAdr+0x16       //验收屏蔽寄存器
  34          #define         REG_AMR4          SJA_BaseAdr+0x17       //验收屏蔽寄存器
  35          
  36          // 发送缓冲区寄存器
  37          #define         REG_TXBuffer1     SJA_BaseAdr+0x10         //发送缓冲区1
  38          #define         REG_TXBuffer2     SJA_BaseAdr+0x11         //发送缓冲区2
  39          #define         REG_TXBuffer3     SJA_BaseAdr+0x12         //发送缓冲区3
  40          #define         REG_TXBuffer4     SJA_BaseAdr+0x13         //发送缓冲区4
  41          #define         REG_TXBuffer5     SJA_BaseAdr+0x14         //发送缓冲区5
  42          #define         REG_TXBuffer6     SJA_BaseAdr+0x15         //发送缓冲区6
  43          #define         REG_TXBuffer7     SJA_BaseAdr+0x16         //发送缓冲区7
  44          #define         REG_TXBuffer8     SJA_BaseAdr+0x17         //发送缓冲区8
  45          #define         REG_TXBuffer9     SJA_BaseAdr+0x18         //发送缓冲区9
  46          #define         REG_TXBuffer10    SJA_BaseAdr+0x19         //发送缓冲区10
  47          #define         REG_TXBuffer11    SJA_BaseAdr+0x1A         //发送缓冲区11
  48          #define         REG_TXBuffer12    SJA_BaseAdr+0x1B         //发送缓冲区12
  49          #define         REG_TXBuffer13    SJA_BaseAdr+0x1C         //发送缓冲区13
  50          
  51          // 接收缓冲区寄存器
  52          #define         REG_RXBuffer1       SJA_BaseAdr+0x10       //接收缓冲区1
  53          #define         REG_RXBuffer2       SJA_BaseAdr+0x11       //接收缓冲区2
  54          #define         REG_RXBuffer3      SJA_BaseAdr+0x12        //接收缓冲区3
  55          #define         REG_RXBuffer4       SJA_BaseAdr+0x13       //接收缓冲区4
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 2   

  56          #define         REG_RXBuffer5      SJA_BaseAdr+0x14        //接收缓冲区5
  57          #define         REG_RXBuffer6     SJA_BaseAdr+0x15         //接收缓冲区6
  58          #define         REG_RXBuffer7     SJA_BaseAdr+0x16         //接收缓冲区7
  59          #define         REG_RXBuffer8     SJA_BaseAdr+0x17         //接收缓冲区8
  60          #define         REG_RXBuffer9     SJA_BaseAdr+0x18         //接收缓冲区9
  61          #define         REG_RXBuffer10     SJA_BaseAdr+0x19        //接收缓冲区10
  62          #define         REG_RXBuffer11     SJA_BaseAdr+0x1A        //接收缓冲区11
  63          #define         REG_RXBuffer12     SJA_BaseAdr+0x1B        //接收缓冲区12
  64          #define         REG_RXBuffer13     SJA_BaseAdr+0x1C        //接收缓冲区13
  65          
  66          #define         REG_RXCOUNT       SJA_BaseAdr+0x1D         //RX报文计数器
  67          #define         REG_RBSA          SJA_BaseAdr+0x1E         //接收缓冲区起始地址
  68          #define         REG_CDR           SJA_BaseAdr+0x1F         //时钟分频寄存器
  69          //功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为24MHZ*/
  70          #define         BTR0_Rate_10k      0xEF          //20KBPS的预设值
  71          #define         BTR1_Rate_10k      0xFF          //20KBPS的预设值
  72          
  73          /*
  74          功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为16MHZ*/
  75          
  76          #define         BTR0_Rate_20k      0x53          //20KBPS的预设值
  77          #define         BTR1_Rate_20k      0x2F          //20KBPS的预设值
  78          #define         BTR0_Rate_40k      0x87          //40KBPS的预设值
  79          #define         BTR1_Rate_40k      0xFF          //40KBPS的预设值
  80          #define         BTR0_Rate_50k      0x47          //50KBPS的预设值
  81          #define         BTR1_Rate_50k      0x2F          //50KBPS的预设值
  82          #define         BTR0_Rate_80k      0x83          //80KBPS的预设值
  83          #define         BTR1_Rate_80k      0xFF          //80KBPS的预设值
  84          #define         BTR0_Rate_100k     0x43          //100KBPS的预设值
  85          #define         BTR1_Rate_100k     0x2f          //100KBPS的预设值
  86          #define         BTR0_Rate_125k     0x03          //125KBPS的预设值
  87          #define         BTR1_Rate_125k     0x1c          //125KBPS的预设值
  88          #define         BTR0_Rate_200k     0x81          //200KBPS的预设值
  89          #define         BTR1_Rate_200k     0xFA          //200KBPS的预设值
  90          #define         BTR0_Rate_250k     0x01          //250KBPS的预设值
  91          #define         BTR1_Rate_250k     0x1c          //250KBPS的预设值
  92          #define         BTR0_Rate_400k     0x80          //400KBPS的预设值
  93          #define         BTR1_Rate_400k     0xfa          //400KBPS的预设值
  94          #define         BTR0_Rate_500k     0x00          //500KBPS的预设值
  95          #define         BTR1_Rate_500k     0x1c          //500KBPS的预设值
  96          #define         BTR0_Rate_666k     0x80          //666KBPS的预设值
  97          #define         BTR1_Rate_666k     0xb6          //666KBPS的预设值
  98          #define         BTR0_Rate_800k     0x00          //800KBPS的预设值
  99          #define         BTR1_Rate_800k     0x16          //800KBPS的预设值
 100          #define         BTR0_Rate_1000k    0x00          //1000KBPS的预设值
 101          #define         BTR1_Rate_1000k    0x14          //1000KBPS的预设值
 102          //BPS
 103          #define         ByteRate_10k       10 //24MHZ**********************
 104          #define         ByteRate_40k       40
 105          #define         ByteRate_50k       50
 106          #define         ByteRate_80k       80
 107          #define         ByteRate_100k      100
 108          #define         ByteRate_125k      125
 109          #define         ByteRate_200k      200
 110          #define         ByteRate_250k      250
 111          #define         ByteRate_400k      400
 112          #define         ByteRate_500k      500
 113          #define         ByteRate_800k      800
 114          #define         ByteRate_1000k     1000
 115          
 116          //命令字
 117          #define    TR_CMD     0X01
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 3   

 118          #define    AT_CMD     0X02
 119          #define    RRB_CMD    0X04
 120          #define    COS_CMD    0X08
 121          #define    SRR_CMD    0X10
 122          #define    GTS_CMD    0X10
 123          //错误字
 124          
 125          #define CAN_INTERFACE_OK      0
 126          #define CAN_BUS_OK            0
 127          #define CAN_INTERFACE_ERR     0XFF
 128          #define CAN_ENTERSET_ERR      0XFE
 129          #define CAN_QUITSET_ERR       0XFD
 130          #define CAN_INITOBJECT_ERR    0XFC
 131          #define CAN_INITBTR_ERR       0XFB
 132          #define CAN_INITOUTCTL_ERR    0XFA
 133          #define CAN_INTCLKDIV_ERR     0XF9
 134          #define CAN_BUS_ERR           0XF8
 135          
 136          // 定义通讯协议的发送命令标识宏
 137          #define SEND_COMMAND_QUERY_STATUS   (0x81)
 138          #define SEND_COMMAND_SET_PARAM      (0x82)
 139          #define SEND_COMMAND_QUERY_PARAM    (0x83)
 140          #define SEND_COMMAND_SET_ONOFF      (0x84)
 141          #define SEND_COMMAND_SET_RESET      (0x85)
 142          
 143          // 定义通讯协议的应答命令标识宏
 144          #define ANS_COMMAND_MODULE_STATUS (0x01)
 145          #define ANS_COMMAND_SET_PARAM     (0x02)
 146          #define ANS_COMMAND_MODULE_PARAM  (0x03)
 147          #define ANS_COMMAND_SET_ONOFF     (0x04)
 148          #define ANS_COMMAND_SET_RESET     (0x05)
 149          
 150          // 定义机器地址宏
 151          #define MASTER_ADDRESS            (0x01)
 152          #define SLAVE_A_ADDRESS           (0x02)
 153          #define SLAVE_B_ADDRESS           (0x03)
 154          #define MACHINE_ADDRESS           (MASTER_ADDRESS)
 155          
 156          //系统指针，指向SJA1000
 157          unsigned char xdata     *SJA_BCANAdr;
 158          unsigned char data              RevceData[10];
 159          unsigned char code table[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8
             -e};
 160          //sbit key=P2^5; //Button按键
 161          sbit CS=P3^5;
 162          
 163          #define SEND_SELECTE (P2)
 164          
 165          unsigned char sendTo = SLAVE_A_ADDRESS;
 166          
 167          void delay_ms(unsigned char t)
 168          {
 169   1           unsigned char i,j;
 170   1           for (i=0;i<t;i++)
 171   1              for(j=0;j<33;j++) 
 172   1              ;
 173   1          
 174   1      }
 175          void delay10ms(void) //延时程序
 176          
 177          {
 178   1      
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 4   

 179   1            unsigned char i,j;
 180   1      
 181   1            for(i=20;i>0;i--)
 182   1      
 183   1            for(j=248;j>0;j--);
 184   1      
 185   1      }
 186          
 187          /****************************************************
 188          **函数原型：  void display(unsigned char num) 
 189          **功    能：  数码管显示
 190          **入口参数:   要显示字符 
 191          **出口参数:   无
 192          **说    明:   当SJA1000收到正确的报文时,然后显示出来           
 193          *****************************************************/
 194          void display(unsigned char num)  // 显示子函数
 195          {
 196   1              P1=table[num]; //将第num个显示编码送P1口
 197   1      }
 198          //***************************************************
 199          
 200          //初始化cpu
 201          
 202          //**************************************************
 203          void Init_Cpu(void)                                  //单片机初始化,开放外部中断0
 204          {
 205   1           PX0=1;
 206   1           EX0=1;
 207   1           IT0=0;
 208   1          // EA=1;
 209   1      }
 210          
 211          /*------------------------------------------------
 212                              串口初始化
 213          ------------------------------------------------*/
 214          void InitUART  (void)
 215          {
 216   1      
 217   1          SCON  = 0x50;                       // SCON: 模式 1, 8-bit UART, 使能接收  
 218   1          TMOD |= 0x20;               // TMOD: timer 1, mode 2, 8-bit 重装
 219   1          TH1   = 0xFD;               // TH1:  重装值 9600 波特率 晶振 11.0592MHz  
 220   1          TR1   = 1;                  // TR1:  timer 1 打开                         
 221   1          EA    = 1;                  //打开总中断
 222   1       }                            
 223          
 224          /*------------------------------------------------
 225                              发送一个字节
 226          ------------------------------------------------*/
 227          void SendByte(unsigned char dat)
 228          {
 229   1       SBUF = dat;
 230   1       while(!TI);
 231   1            TI = 0;
 232   1      }
 233          /*------------------------------------------------
 234                              发送一个字符串
 235          ------------------------------------------------*/
 236          void SendStr(unsigned char *s)
 237          {
 238   1       while(*s!='\0')// \0 表示字符串结束标志，
 239   1                      //通过检测是否字符串末尾
 240   1        {
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 5   

 241   2        SendByte(*s);
 242   2        s++;
 243   2        }
 244   1      }
 245          
 246          //***********************************************************************
 247          /************************************************************************
 248          *函数原型: bit BCAN_SET_OUTCLK( unsigned char Clock_Out)               *
 249          *参数说明:                                                             *
 250          *          Clock_Out:存放时钟分频寄存器(CDR)的参数设置                 *
 251          *返回值:                                                               *
 252          *           0 ;设置成功                                                *
 253          *           1 ;设置失败                                                *
 254          *说明:设置SJA1000的时钟分频 。该子程序只能用于复位模式                      
 255          ************************************************************************/
 256          bit BCAN_SET_OUTCLK(unsigned char Clock_Out)
 257          {
 258   1        SJA_BCANAdr=REG_CDR;           
 259   1      
 260   1        *SJA_BCANAdr=Clock_Out;        
 261   1        if(*SJA_BCANAdr != Clock_Out)
 262   1           return 1; 
 263   1         else 
 264   1           return 0;
 265   1      } 
 266          
 267          /************************************************************************
 268          *函数原型: bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3     
 269                                                        BCAN_AMR0, BCAN_AMR1, BCAN_AMR2, BCAN_AMR3     
 270          *参数说明:                                                              *
 271          *    BCAN_ACR(0-3):存放验收代码寄存器（ACR）的参数设置                  *
 272          *    BCAN_AMR(0-3):存放接收屏蔽寄存器（AMR）的参数设置                  *
 273          *返回值:                                                                *
 274          *           0 ;设置成功                                                 *
 275          *           1 ;设置失败                                                 *
 276          *说明:设置CAN节点的通讯对象，允许接收的报文,是由AMR和ACR共同决定的.     *
 277          *************************************************************************/ 
 278          bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3,BCAN_AMR0,BCAN_AMR1,BCAN_AMR2,B
             -CAN_AMR3)
 279          {
 280   1        SJA_BCANAdr=REG_TXBuffer1;     
 281   1      
 282   1        *SJA_BCANAdr=BCAN_ACR0;        //写入参数
 283   1         
 284   1        SJA_BCANAdr=REG_TXBuffer2;
 285   1        *SJA_BCANAdr=BCAN_ACR1;
 286   1      
 287   1        SJA_BCANAdr=REG_TXBuffer3;  
 288   1        *SJA_BCANAdr=BCAN_ACR2;
 289   1         
 290   1        SJA_BCANAdr=REG_TXBuffer4; 
 291   1        *SJA_BCANAdr=BCAN_ACR3;  
 292   1       
 293   1        //校验写入值
 294   1        if(*SJA_BCANAdr != BCAN_ACR3)  return 1; 
 295   1        
 296   1        SJA_BCANAdr=REG_TXBuffer5;      
 297   1      
 298   1        *SJA_BCANAdr=BCAN_AMR0;     //写入参数
 299   1        
 300   1        SJA_BCANAdr=REG_TXBuffer6;         
 301   1        *SJA_BCANAdr=BCAN_AMR1;
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 6   

 302   1      
 303   1        SJA_BCANAdr=REG_TXBuffer7; 
 304   1        *SJA_BCANAdr=BCAN_AMR2;
 305   1      
 306   1        SJA_BCANAdr=REG_TXBuffer8; 
 307   1        *SJA_BCANAdr=BCAN_AMR3;
 308   1        //校验写入值
 309   1        if(*SJA_BCANAdr != BCAN_AMR3) return 1; 
 310   1      
 311   1        return 0;
 312   1      } 
 313          
 314          /************************************************************************
 315          ;*函数原型:  bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)          *
 316          ;*返回值:                                                               *
 317          ;*           0 ;波特率设置成功                                          *
 318          ;*           1 ;波特率设置失败                                          *
 319          ;*                                                                      * 
 320          ;*说明:设置CAN控制器SJA1000通讯波特率.SJA1000的晶振必须为16MHZ,         *
 321          ;*     其它晶体的频率的值的波特率，需自己计算 。该子程序只能用于        *
 322          ;*     复位模式                                                         *  
 323          ;************************************************************************/ 
 324          bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)         //波特率选择
 325          {
 326   1           unsigned char BR_Num= CAN_ByteRate,BTR0_num,BTR1_num;
 327   1             switch (BR_Num)
 328   1              {
 329   2                case ByteRate_10k:
 330   2                     BTR0_num=0xef;
 331   2                     BTR1_num=0xff;
 332   2                     break;
 333   2                case ByteRate_40k  :
 334   2                     BTR0_num=0x87;
 335   2                     BTR1_num=0xff;
 336   2                     break;
 337   2                case ByteRate_50k:
 338   2                     //BTR0_num=0x47;
 339   2                     //BTR1_num=0x2f;
 340   2                     BTR0_num=0x0e;
 341   2                     BTR1_num=0x1c;
 342   2                     break;
 343   2                case ByteRate_80k  :
 344   2                     //BTR0_num=0x83;
 345   2                     //BTR1_num=0xff;
 346   2                     BTR0_num=0x49;                      //ok
 347   2                     BTR1_num=0x1b;
 348   2                     break;
 349   2                case ByteRate_100k  :
 350   2                     //BTR0_num=0x43;
 351   2                     //BTR1_num=0x2f;
 352   2                     BTR0_num=0x04;                       //ok
 353   2                     BTR1_num=0x1c;
 354   2                     break;
 355   2                case ByteRate_125k  :                      //SJA1000的晶振为必须为16MHZ,波特率设置为125kpbs
 356   2                     BTR0_num=0x03;
 357   2                     BTR1_num=0x1c;
 358   2                     //BTR0_num=0x44;                        //ok
 359   2                     //BTR1_num=0x1f;
 360   2                     break;
 361   2                case ByteRate_200k  ://24MHZ
 362   2                  //   BTR0_num=0xc5;  //
 363   2                   //  BTR1_num=0xa5;
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 7   

 364   2                     BTR0_num=0x43;                        //ok
 365   2                     BTR1_num=0x1b;
 366   2                     break;
 367   2                case ByteRate_250k  ://24MHZ
 368   2                  //   BTR0_num=0xc5;  //
 369   2                   //  BTR1_num=0xa5;
 370   2                     BTR0_num=0x01;                        //ok
 371   2                     BTR1_num=0x1c;
 372   2                     break;
 373   2                /* case ByteRate_200k  ://24MHZ
 374   2                     BTR0_num=0x81;
 375   2                     BTR1_num=0xFA;
 376   2                     break;*/
 377   2                case ByteRate_400k  :
 378   2                     BTR0_num=0x80;
 379   2                     BTR1_num=0xfa;
 380   2                     break;
 381   2                case ByteRate_500k  :
 382   2                     BTR0_num=0x01;
 383   2                     BTR1_num=0x1c;
 384   2                     break;
 385   2                case ByteRate_800k  :
 386   2                     BTR0_num=0x00;
 387   2                     BTR1_num=0x16;
 388   2                     break;
 389   2                case ByteRate_1000k  :
 390   2                     BTR0_num=0x00;
 391   2                     BTR1_num=0x14;
 392   2                     break;
 393   2                default :
 394   2                     return 1;
 395   2                     break;
 396   2              }
 397   1      
 398   1          SJA_BCANAdr=REG_BTR0;
 399   1          *SJA_BCANAdr=BTR0_num;
 400   1          if(*SJA_BCANAdr!=BTR0_num)
 401   1            {return 1;}
 402   1          SJA_BCANAdr=REG_BTR1;
 403   1          *SJA_BCANAdr=BTR1_num;
 404   1          if(*SJA_BCANAdr!=BTR1_num)
 405   1            {return 1;}
 406   1          return 0;
 407   1      }
 408          /************************************************************************
 409           *函数原型: bit BCAN_SET_CONTROL(unsigend char CMD)                     *
 410           *参数说明: 设置控制寄存器                                              *
 411           ************************************************************************/
 412          bit BCAN_SET_CONTROL(unsigned char CMD)
 413          {  unsigned char TempData;
 414   1       
 415   1        SJA_BCANAdr=REG_CONTROL;   //SJA_BaseAdr+0x00  控制寄存器
 416   1        TempData=  *SJA_BCANAdr; 
 417   1       
 418   1        *SJA_BCANAdr=CMD;
 419   1       
 420   1        if (*SJA_BCANAdr == CMD)
 421   1          return 0;
 422   1        else
 423   1          return 1;
 424   1      
 425   1      }
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 8   

 426          /************************************************************************
 427           *函数原型:  bit   BCAN_CREATE_COMMUNATION(void)                        * 
 428           *参数说明:  无                                                         *
 429           *返回值:                                                               *
 430           *           0 ; 表示SJA1000接口正常                                    *
 431           *           1 ; 表示SJA1000与处理器接口不正常                          *
 432           *说明:该函数用于检测CAN控制器的接口是否正常                            *
 433           ************************************************************************/
 434           bit BCAN_CREATE_COMMUNATION(void)
 435           {  
 436   1          SJA_BCANAdr=REG_TEST;      
 437   1          *SJA_BCANAdr=0xaa;       //写入测试值
 438   1          if(*SJA_BCANAdr == 0xaa)
 439   1             return 0;            //读测试正确
 440   1          else
 441   1             return 1;
 442   1           
 443   1       }
 444          
 445           /************************************************************************
 446           *函数原型:      bit   BCAN_ENTER_RETMODEL(void)                        *
 447           *参数说明:  无                                                         *
 448           *返回值:                                                               *
 449           *           0 ; 表示成功进入复位工作模式                               *
 450           *           1 ; 表示不能进入复位工作模式                               *
 451           *                                                                      * 
 452           *说明:      CAN控制器进入复位工作模式                                  *
 453           ************************************************************************/ 
 454           bit   BCAN_ENTER_RETMODEL(void)     //置位复位请求
 455           {
 456   1          unsigned   char   TempData;
 457   1          SJA_BCANAdr  = REG_CONTROL;   
 458   1      
 459   1        TempData=  *SJA_BCANAdr;       
 460   1          *SJA_BCANAdr=0x01;                 //置位复位请求 和单滤波模式
 461   1          if((*SJA_BCANAdr&0x01) == 1)
 462   1           return   0;
 463   1          else
 464   1            return   1;   
 465   1       } 
 466          /************************************************************************
 467           *函数原型:   BCAN_CMD_PRG(unsigned char cmd)                           *
 468           *参数说明:  unsigned char cmd                                          *
 469           *返回值:                                                               *
 470           *           0 ; 请求成功                                               *
 471           *           1 ; 请求失败                                               *
 472           *                                                                      * 
 473           *说明:      启动命令字                                                 *
 474           ************************************************************************/
 475          bit  BCAN_CMD_PRG(unsigned char cmd)
 476           {
 477   1         SJA_BCANAdr=REG_COMMAND;            //访问地址指向命令寄存器
 478   1         *SJA_BCANAdr=cmd;                   //启动命令字
 479   1       
 480   1         switch(cmd)
 481   1         {    case  TR_CMD:                    
 482   2      
 483   2                 return    0;
 484   2                 break;
 485   2      
 486   2        case  SRR_CMD:      
 487   2      
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 9   

 488   2            return 0;
 489   2           break;
 490   2          
 491   2        case  AT_CMD:                  
 492   2      
 493   2                  SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 494   2                 if((*SJA_BCANAdr & 0x20)==0) //判断是否正在发送
 495   2                   return  0;
 496   2                 else
 497   2                   return  1;              
 498   2                 break; 
 499   2           case  RRB_CMD:                   
 500   2                 SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 501   2                 if((*SJA_BCANAdr & 0x01)==1)
 502   2                    return  1;
 503   2                 else           
 504   2                    return  0;               
 505   2                 break;  
 506   2           case  COS_CMD:                  
 507   2      
 508   2                 SJA_BCANAdr = REG_STATUS;   
 509   2                 if((*SJA_BCANAdr & 0x02)==0)//判断清除超载是否成功
 510   2                   return  0; 
 511   2                 else
 512   2                   return  1;             
 513   2                 break; 
 514   2           default:
 515   2                   return  1;
 516   2                   break; 
 517   2         }
 518   1      }
 519          
 520          
 521          unsigned char BCAN_DATA_WRITE(unsigned char *SendDataBuf)
 522           {  unsigned char temp;
 523   1         
 524   1          SJA_BCANAdr = REG_STATUS;    
 525   1          temp=*SJA_BCANAdr;
 526   1      
 527   1          if ((temp&0x08)==0) return  1;    //上次发送未完成
 528   1          if ((temp&0x04)==0) return  2;    //发送缓冲区是否锁定 
 529   1          if ((temp&0x10)==0x10) return 3;  //判断是否正在接收   
 530   1      
 531   1          SJA_BCANAdr = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 532   1      
 533   1          memcpy(SJA_BCANAdr,SendDataBuf,4);   
 534   1          BCAN_CMD_PRG(TR_CMD);             //请求发送         
 535   1          return 0;
 536   1      }
 537          
 538          //CAN发送任意长度字节
 539          void CAN_Send_anylength(unsigned char *CAN_TX_Buf, unsigned char length1, unsigned char com)
 540          {
 541   1              unsigned char temptt;
 542   1              loop:
 543   1          SJA_BCANAdr = REG_STATUS;    
 544   1               temptt=*SJA_BCANAdr; 
 545   1              //temptt=Read_SJA1000(REG_STATUS);
 546   1              if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 547   1              //可以向发送缓冲器写数据
 548   1              {
 549   2          SJA_BCANAdr  = REG_TXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 10  

 550   2          *SJA_BCANAdr = length1 + 1;  
 551   2          SJA_BCANAdr  = REG_TXBuffer2;      //本机地址
 552   2          *SJA_BCANAdr = sendTo;  
 553   2           SJA_BCANAdr = REG_TXBuffer3;     //目标地址
 554   2          *SJA_BCANAdr = MACHINE_ADDRESS;
 555   2          SJA_BCANAdr  = REG_TXBuffer4;
 556   2          *SJA_BCANAdr = com;
 557   2          SJA_BCANAdr  = REG_TXBuffer5; 
 558   2          memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);   
 559   2              //数据发送请求
 560   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 561   2              }
 562   1      }
 563          
 564          //CAN发送一个字节
 565          void CAN_Send_onebyte(unsigned char CAN_TX_data, unsigned char com)
 566          {
 567   1              unsigned char temptt;
 568   1              loop:
 569   1          SJA_BCANAdr = REG_STATUS;    
 570   1               temptt=*SJA_BCANAdr; 
 571   1              //temptt=Read_SJA1000(REG_STATUS);
 572   1              if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 573   1              //可以向发送缓冲器写数据
 574   1              {
 575   2          SJA_BCANAdr  = REG_TXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 576   2          *SJA_BCANAdr = 2;  
 577   2          SJA_BCANAdr  = REG_TXBuffer2;      //访问地址指向发送缓冲区1,修改成头文件
 578   2          *SJA_BCANAdr = sendTo;  
 579   2          SJA_BCANAdr  = REG_TXBuffer3;     //访问地址指向发送缓冲区1,修改成头文件
 580   2          *SJA_BCANAdr = MACHINE_ADDRESS;
 581   2          SJA_BCANAdr  = REG_TXBuffer4;
 582   2          *SJA_BCANAdr = com;
 583   2          SJA_BCANAdr  = REG_TXBuffer5;
 584   2          //memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);  
 585   2          *SJA_BCANAdr = CAN_TX_data; 
 586   2              //数据发送请求
 587   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 588   2              }
 589   1      }
 590          
 591          
 592          /****************************************************
 593          **函数原型：   bit Sja_1000_Init(void)
 594          **功    能：   初始化SJA10000
 595          **入口参数:    无 
 596          **返 回 值:     
 597                0： 初始化成功 
 598                1： 复位失败 
 599                2:  测试sja1000失败 
 600                3： 设置失败 
 601                4： 设置验收滤波器失败
 602                5： 设置波特率失败     
 603          *****************************************************/
 604          unsigned char Sja_1000_Init(void)
 605          {
 606   1              bit s; 
 607   1              EA=0;                                 //关总中断
 608   1              
 609   1              s=BCAN_ENTER_RETMODEL();
 610   1              if (s==1) return 1; 
 611   1              
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 11  

 612   1              s=BCAN_CREATE_COMMUNATION();       //建立通信
 613   1              if (s==1) return 2;
 614   1      
 615   1              s=BCAN_SET_OUTCLK(0xC8);             //Pelican
 616   1              if (s==1) return 3;
 617   1      
 618   1              //s=BCAN_SET_OBJECT(0x01,0xe0,0x02,0xe0,0x00,0x0f,0x00,0x0f);//屏蔽寄存器，都设为无关，接收所有报文
 619   1        s=BCAN_SET_OBJECT(MACHINE_ADDRESS,SLAVE_A_ADDRESS,MACHINE_ADDRESS,SLAVE_B_ADDRESS,0X00,0X00,0X00,0X00);/
             -/屏蔽寄存器，都设为无关，接收所有报文 
 620   1             //当屏蔽位为1，不滤波，0就滤波必须相等
 621   1              //s=BCAN_SET_OBJECT(0x55,0xe0,0xaa,0xa1,0x00,0x00,0xff,0xff);//验收码&屏蔽码
 622   1              if (s==1) return 4;
 623   1      
 624   1              s=BCAN_SET_BANDRATE(ByteRate_125k);    //设置波特率125K 16MHZ
 625   1              if (s==1) return 5;
 626   1          
 627   1              SJA_BCANAdr=REG_OCR ;                  //输出控制寄存器  
 628   1              *SJA_BCANAdr=0x1a;        
 629   1              SJA_BCANAdr=REG_INTENABLE;      
 630   1              *SJA_BCANAdr=0x1D;                  //设置中断，接收和发送中断
 631   1          
 632   1              SJA_BCANAdr=REG_CONTROL;            //退出 复位模式
 633   1              *SJA_BCANAdr=*SJA_BCANAdr&0xfe;
 634   1              if(*SJA_BCANAdr!=0x00)
 635   1              return 6;
 636   1      
 637   1              EA=1;
 638   1              return 0;   
 639   1      } 
 640          
 641          /****************************************************
 642          **函数原型：  void ex0_int(void) interrupt 0 //using 1
 643          **功    能：  中断接收函数
 644          **入口参数:   无 
 645          **出口参数:   RevceData[]数组   
 646          **说    明:   当sja1000 收到正确的报文时,会产生int中断           
 647          *****************************************************/
 648          void ex0_int(void) interrupt 0 using 1
 649          {  
 650   1              unsigned char tt,tt1,length,com = 0;
 651   1       
 652   1              SJA_BCANAdr=REG_INTERRUPT;
 653   1              if((*SJA_BCANAdr)&0x01)                   //产生了接收中断
 654   1              {  
 655   2                      SJA_BCANAdr=REG_RXBuffer1;
 656   2                      tt=*SJA_BCANAdr;
 657   2                      tt1=*SJA_BCANAdr;
 658   2                      length=tt1&0x0F;
 659   2                      if ((tt&0x40)!=0x40)                   //数据帧   = 为远程帧
 660   2                      {  
 661   3                              SJA_BCANAdr = REG_RXBuffer4;           //宏定义的变量不能memcpy(RevceData,REG_RXBuffer4,8);
 662   3              com = *SJA_BCANAdr;
 663   3              SJA_BCANAdr = REG_RXBuffer5;
 664   3              memcpy(RevceData,SJA_BCANAdr,length - 1);  //功能：由src所指内存区域复制count个字节到dest所指内存区
             -域
 665   3                              display(RevceData[0]);
 666   3                      }
 667   2                      BCAN_CMD_PRG(RRB_CMD);                  //释放SJA1000接收缓冲区，****已经修改
 668   2              }
 669   1      } 
 670          
 671          /****************************************************
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 12  

 672          **函数原型：   void main(void)
 673          **功    能：   主程序部分:
 674          **入口参数:    无 
 675          **返 回 值:     
 676          *****************************************************/
 677          void main(void)
 678          {  
 679   1              unsigned char temptt,ss;
 680   1              unsigned char num=0;
 681   1      
 682   1              CS=0;                //片选择引脚
 683   1              EA=0;
 684   1              
 685   1              Init_Cpu(); 
 686   1              InitUART();     //初始化串口 
 687   1      
 688   1              //display(10);            //显示该板号A 
 689   1              
 690   1              ss=Sja_1000_Init();  //初始化SJA1000     
 691   1         
 692   1              if (ss!=0)             //初始化失败
 693   1              {
 694   2                      SendStr("Sja_1000_Init() failure");              // 测试专用发送到串口看状态
 695   2          display(ss);                                     // 显示错误信息  
 696   2              }
 697   1              else
 698   1              {
 699   2                      SendStr("Sja_1000_Init() sucess");  
 700   2          EA=1; //初始化成功，开总中断
 701   2          display(ss);  
 702   2              }
 703   1      
 704   1              while(1) 
 705   1              {
 706   2          // 扫描按键选择发送的地址和发送的命令
 707   2                      if (SEND_SELECTE != 0xF8)
 708   2                      {
 709   3                              delay_ms(500);
 710   3                              switch (SEND_SELECTE)
 711   3                              {
 712   4              case 0xFE:sendTo = SLAVE_A_ADDRESS;break;
 713   4              case 0xFD:sendTo = SLAVE_B_ADDRESS;break;
 714   4                                      case 0xFB:CAN_Send_onebyte(1, SEND_COMMAND_QUERY_STATUS);break;
 715   4                                      case 0xF7:CAN_Send_onebyte(2, SEND_COMMAND_SET_PARAM);break;
 716   4                                      case 0xEF:CAN_Send_onebyte(3, SEND_COMMAND_QUERY_PARAM);break;
 717   4                                      case 0xDF:CAN_Send_onebyte(4, SEND_COMMAND_SET_ONOFF);break;
 718   4                                      case 0xBF:CAN_Send_onebyte(5, SEND_COMMAND_SET_RESET);break;
 719   4              case 0x7F:break;
 720   4                                      default:break;
 721   4                              }
 722   3                      }
 723   2                      
 724   2                      SJA_BCANAdr = REG_STATUS;    
 725   2          temptt=*SJA_BCANAdr;         
 726   2          delay_ms(100);
 727   2              if ((temptt&0x40)==0x40)                     //读错误状态
 728   2          {  
 729   3                      Sja_1000_Init();
 730   3                      SendByte(0xee);                    //测试专用发送到串口看状态                     
 731   3              }
 732   2              }   
 733   1      }
C51 COMPILER V9.52.0.0   MASTER                                                            05/27/2016 08:20:56 PAGE 13  

 734          
 735          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1278    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
