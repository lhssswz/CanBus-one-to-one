C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SERVANT
OBJECT MODULE PLACED IN .\Servant.obj
COMPILER INVOKED BY: D:\SoftPath\KEIL4\C51\BIN\C51.EXE ..\Servant.c BROWSE DEBUG OBJECTEXTEND OBJECT(.\Servant.obj)

line level    source

   1          #include  "stdio.h"
   2          #include  "string.h"
   3          #include  "intrins.h"
   4          #include  "reg51.h"
   5          
   6          //定义SJA1000的基址
   7          #define SJA_BaseAdr  0XFE00       //P2.0
   8          // 控制寄存器
   9          #define         REG_CONTROL       SJA_BaseAdr+0x00       //内部控制寄存器
  10          #define         REG_COMMAND       SJA_BaseAdr+0x01       //命令寄存器
  11          #define         REG_STATUS        SJA_BaseAdr+0x02       //状态寄存器
  12          #define         REG_INTERRUPT     SJA_BaseAdr+0x03       //中断寄存器
  13          #define         REG_INTENABLE     SJA_BaseAdr+0x04       //中断使能寄存器
  14          #define         REG_BTR0          SJA_BaseAdr+0x06       //总线定时寄存器0
  15          #define         REG_BTR1          SJA_BaseAdr+0x07       //总线定时寄存器1
  16          #define         REG_OCR           SJA_BaseAdr+0x08       //输出控制寄存器
  17          #define         REG_TEST          SJA_BaseAdr+0x09       //测试寄存器
  18          
  19          #define         REG_RESVER1       SJA_BaseAdr+0x0A       //保留1
  20          #define         REG_ARBITRATE     SJA_BaseAdr+0x0B       //仲裁丢失捕捉
  21          #define         REG_ERRCATCH      SJA_BaseAdr+0x0C       //错误代码捕捉
  22          #define         REG_ERRLIMIT      SJA_BaseAdr+0x0D       //错误报警限额
  23          
  24          #define         REG_RXERR         SJA_BaseAdr+0x0E         //接收错误计数器
  25          #define         REG_TXERR         SJA_BaseAdr+0x0F         //发送错误计数器
  26          
  27          #define         REG_ACR1          SJA_BaseAdr+0x10       //验收代码寄存器
  28          #define         REG_ACR2          SJA_BaseAdr+0x11       //验收代码寄存器
  29          #define         REG_ACR3          SJA_BaseAdr+0x12       //验收代码寄存器
  30          #define         REG_ACR4          SJA_BaseAdr+0x13       //验收代码寄存器
  31          #define         REG_AMR1          SJA_BaseAdr+0x14       //验收屏蔽寄存器
  32          #define         REG_AMR2          SJA_BaseAdr+0x15       //验收屏蔽寄存器
  33          #define         REG_AMR3          SJA_BaseAdr+0x16       //验收屏蔽寄存器
  34          #define         REG_AMR4          SJA_BaseAdr+0x17       //验收屏蔽寄存器
  35          
  36          // 发送缓冲区寄存器
  37          #define         REG_TXBuffer1     SJA_BaseAdr+0x10         //发送缓冲区1
  38          #define         REG_TXBuffer2     SJA_BaseAdr+0x11         //发送缓冲区2
  39          #define         REG_TXBuffer3     SJA_BaseAdr+0x12         //发送缓冲区3
  40          #define         REG_TXBuffer4     SJA_BaseAdr+0x13         //发送缓冲区4
  41          #define         REG_TXBuffer5     SJA_BaseAdr+0x14         //发送缓冲区5
  42          #define         REG_TXBuffer6     SJA_BaseAdr+0x15         //发送缓冲区6
  43          #define         REG_TXBuffer7     SJA_BaseAdr+0x16         //发送缓冲区7
  44          #define         REG_TXBuffer8     SJA_BaseAdr+0x17         //发送缓冲区8
  45          #define         REG_TXBuffer9     SJA_BaseAdr+0x18         //发送缓冲区9
  46          #define         REG_TXBuffer10    SJA_BaseAdr+0x19         //发送缓冲区10
  47          #define         REG_TXBuffer11    SJA_BaseAdr+0x1A         //发送缓冲区11
  48          #define         REG_TXBuffer12    SJA_BaseAdr+0x1B         //发送缓冲区12
  49          #define         REG_TXBuffer13    SJA_BaseAdr+0x1C         //发送缓冲区13
  50          
  51          // 接收缓冲区寄存器
  52          #define         REG_RXBuffer1       SJA_BaseAdr+0x10       //接收缓冲区1
  53          #define         REG_RXBuffer2       SJA_BaseAdr+0x11       //接收缓冲区2
  54          #define         REG_RXBuffer3      SJA_BaseAdr+0x12        //接收缓冲区3
  55          #define         REG_RXBuffer4       SJA_BaseAdr+0x13       //接收缓冲区4
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 2   

  56          #define         REG_RXBuffer5      SJA_BaseAdr+0x14        //接收缓冲区5
  57          #define         REG_RXBuffer6     SJA_BaseAdr+0x15         //接收缓冲区6
  58          #define         REG_RXBuffer7     SJA_BaseAdr+0x16         //接收缓冲区7
  59          #define         REG_RXBuffer8     SJA_BaseAdr+0x17         //接收缓冲区8
  60          #define         REG_RXBuffer9     SJA_BaseAdr+0x18         //接收缓冲区9
  61          #define         REG_RXBuffer10     SJA_BaseAdr+0x19        //接收缓冲区10
  62          #define         REG_RXBuffer11     SJA_BaseAdr+0x1A        //接收缓冲区11
  63          #define         REG_RXBuffer12     SJA_BaseAdr+0x1B        //接收缓冲区12
  64          #define         REG_RXBuffer13     SJA_BaseAdr+0x1C        //接收缓冲区13
  65          
  66          #define         REG_RXCOUNT       SJA_BaseAdr+0x1D         //RX报文计数器
  67          #define         REG_RBSA          SJA_BaseAdr+0x1E         //接收缓冲区起始地址
  68          #define         REG_CDR           SJA_BaseAdr+0x1F         //时钟分频寄存器
  69          //功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为24MHZ*/
  70          #define         BTR0_Rate_10k      0xEF          //20KBPS的预设值
  71          #define         BTR1_Rate_10k      0xFF          //20KBPS的预设值
  72          
  73          /*
  74          功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为16MHZ*/
  75          
  76          #define         BTR0_Rate_20k      0x53          //20KBPS的预设值
  77          #define         BTR1_Rate_20k      0x2F          //20KBPS的预设值
  78          #define         BTR0_Rate_40k      0x87          //40KBPS的预设值
  79          #define         BTR1_Rate_40k      0xFF          //40KBPS的预设值
  80          #define         BTR0_Rate_50k      0x47          //50KBPS的预设值
  81          #define         BTR1_Rate_50k      0x2F          //50KBPS的预设值
  82          #define         BTR0_Rate_80k      0x83          //80KBPS的预设值
  83          #define         BTR1_Rate_80k      0xFF          //80KBPS的预设值
  84          #define         BTR0_Rate_100k     0x43          //100KBPS的预设值
  85          #define         BTR1_Rate_100k     0x2f          //100KBPS的预设值
  86          #define         BTR0_Rate_125k     0x03          //125KBPS的预设值
  87          #define         BTR1_Rate_125k     0x1c          //125KBPS的预设值
  88          #define         BTR0_Rate_200k     0x81          //200KBPS的预设值
  89          #define         BTR1_Rate_200k     0xFA          //200KBPS的预设值
  90          #define         BTR0_Rate_250k     0x01          //250KBPS的预设值
  91          #define         BTR1_Rate_250k     0x1c          //250KBPS的预设值
  92          #define         BTR0_Rate_400k     0x80          //400KBPS的预设值
  93          #define         BTR1_Rate_400k     0xfa          //400KBPS的预设值
  94          #define         BTR0_Rate_500k     0x00          //500KBPS的预设值
  95          #define         BTR1_Rate_500k     0x1c          //500KBPS的预设值
  96          #define         BTR0_Rate_666k     0x80          //666KBPS的预设值
  97          #define         BTR1_Rate_666k     0xb6          //666KBPS的预设值
  98          #define         BTR0_Rate_800k     0x00          //800KBPS的预设值
  99          #define         BTR1_Rate_800k     0x16          //800KBPS的预设值
 100          #define         BTR0_Rate_1000k    0x00          //1000KBPS的预设值
 101          #define         BTR1_Rate_1000k    0x14          //1000KBPS的预设值
 102          //BPS
 103          #define         ByteRate_10k       10 //24MHZ**********************
 104          #define         ByteRate_40k       40
 105          #define         ByteRate_50k       50
 106          #define         ByteRate_80k       80
 107          #define         ByteRate_100k      100
 108          #define         ByteRate_125k      125
 109          #define         ByteRate_200k      200
 110          #define         ByteRate_250k      250
 111          #define         ByteRate_400k      400
 112          #define         ByteRate_500k      500
 113          #define         ByteRate_800k      800
 114          #define         ByteRate_1000k     1000
 115          
 116          //命令字
 117          #define    TR_CMD     0X01
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 3   

 118          #define    AT_CMD     0X02
 119          #define    RRB_CMD    0X04
 120          #define    COS_CMD    0X08
 121          #define    SRR_CMD    0X10
 122          #define    GTS_CMD    0X10
 123          //错误字
 124          
 125          #define CAN_INTERFACE_OK      0
 126          #define CAN_BUS_OK            0
 127          #define CAN_INTERFACE_ERR     0XFF
 128          #define CAN_ENTERSET_ERR      0XFE
 129          #define CAN_QUITSET_ERR       0XFD
 130          #define CAN_INITOBJECT_ERR    0XFC
 131          #define CAN_INITBTR_ERR       0XFB
 132          #define CAN_INITOUTCTL_ERR    0XFA
 133          #define CAN_INTCLKDIV_ERR     0XF9
 134          #define CAN_BUS_ERR           0XF8
 135          
 136          // 定义通讯协议的发送命令标识宏
 137          #define SEND_COMMAND_QUERY_STATUS   (0x81)
 138          #define SEND_COMMAND_SET_PARAM      (0x82)
 139          #define SEND_COMMAND_QUERY_PARAM    (0x83)
 140          #define SEND_COMMAND_SET_ONOFF      (0x84)
 141          #define SEND_COMMAND_SET_RESET      (0x85)
 142          
 143          // 定义通讯协议的应答命令标识宏
 144          #define ANS_COMMAND_MODULE_STATUS (0x01)
 145          #define ANS_COMMAND_SET_PARAM     (0x02)
 146          #define ANS_COMMAND_MODULE_PARAM  (0x03)
 147          #define ANS_COMMAND_SET_ONOFF     (0x04)
 148          #define ANS_COMMAND_SET_RESET     (0x05)
 149          
 150          // 定义机器地址宏
 151          #define MASTER_ADDRESS            (0x01)
 152          #define SLAVE_A_ADDRESS           (0x02)
 153          #define SLAVE_B_ADDRESS           (0x03)
 154          #define MACHINE_ADDRESS           (SLAVE_A_ADDRESS)
 155          
 156          //系统指针，指向SJA1000
 157          unsigned char xdata     *SJA_BCANAdr;
 158          unsigned char data              RevceData[10];
 159          unsigned char code table[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8
             -e};
 160          sbit CS=P3^5;
 161          
 162          void delay_ms(unsigned char t)
 163          {
 164   1           unsigned char i,j;
 165   1           for (i=0;i<t;i++)
 166   1              for(j=0;j<33;j++) 
 167   1              ;
 168   1          
 169   1      }
 170          void delay10ms(void) //延时程序
 171          
 172          {
 173   1      
 174   1            unsigned char i,j;
 175   1      
 176   1            for(i=20;i>0;i--)
 177   1      
 178   1            for(j=248;j>0;j--);
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 4   

 179   1      
 180   1      }
 181          
 182          /****************************************************
 183          **函数原型：  void display(unsigned char num) 
 184          **功    能：  数码管显示
 185          **入口参数:   要显示字符 
 186          **出口参数:   无
 187          **说    明:   当SJA1000收到正确的报文时,然后显示出来           
 188          *****************************************************/
 189          void display(unsigned char num)  // 显示子函数
 190          {
 191   1              P1=table[num]; //将第num个显示编码送P1口
 192   1      }
 193          //***************************************************
 194          
 195          //初始化cpu
 196          
 197          //**************************************************
 198          void Init_Cpu(void)                                  //单片机初始化,开放外部中断0
 199          {
 200   1           PX0=1;
 201   1           EX0=1;
 202   1           IT0=0;
 203   1          // EA=1;
 204   1      }
 205          
 206          /*------------------------------------------------
 207                              串口初始化
 208          ------------------------------------------------*/
 209          void InitUART  (void)
 210          {
 211   1      
 212   1          SCON  = 0x50;                       // SCON: 模式 1, 8-bit UART, 使能接收  
 213   1          TMOD |= 0x20;               // TMOD: timer 1, mode 2, 8-bit 重装
 214   1          TH1   = 0xFD;               // TH1:  重装值 9600 波特率 晶振 11.0592MHz  
 215   1          TR1   = 1;                  // TR1:  timer 1 打开                         
 216   1          EA    = 1;                  //打开总中断
 217   1       }                            
 218          
 219          /*------------------------------------------------
 220                              发送一个字节
 221          ------------------------------------------------*/
 222          void SendByte(unsigned char dat)
 223          {
 224   1       SBUF = dat;
 225   1       while(!TI);
 226   1            TI = 0;
 227   1      }
 228          /*------------------------------------------------
 229                              发送一个字符串
 230          ------------------------------------------------*/
 231          void SendStr(unsigned char *s)
 232          {
 233   1       while(*s!='\0')// \0 表示字符串结束标志，
 234   1                      //通过检测是否字符串末尾
 235   1        {
 236   2        SendByte(*s);
 237   2        s++;
 238   2        }
 239   1      }
 240          
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 5   

 241          //***********************************************************************
 242          /************************************************************************
 243          *函数原型: bit BCAN_SET_OUTCLK( unsigned char Clock_Out)               *
 244          *参数说明:                                                             *
 245          *          Clock_Out:存放时钟分频寄存器(CDR)的参数设置                 *
 246          *返回值:                                                               *
 247          *           0 ;设置成功                                                *
 248          *           1 ;设置失败                                                *
 249          *说明:设置SJA1000的时钟分频 。该子程序只能用于复位模式                      
 250          ************************************************************************/
 251          bit BCAN_SET_OUTCLK(unsigned char Clock_Out)
 252          {
 253   1        SJA_BCANAdr=REG_CDR;           
 254   1      
 255   1        *SJA_BCANAdr=Clock_Out;        
 256   1        if(*SJA_BCANAdr != Clock_Out)
 257   1           return 1; 
 258   1         else 
 259   1           return 0;
 260   1      } 
 261          
 262          /************************************************************************
 263          *函数原型: bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3     
 264                                                        BCAN_AMR0, BCAN_AMR1, BCAN_AMR2, BCAN_AMR3     
 265          *参数说明:                                                              *
 266          *    BCAN_ACR(0-3):存放验收代码寄存器（ACR）的参数设置                  *
 267          *    BCAN_AMR(0-3):存放接收屏蔽寄存器（AMR）的参数设置                  *
 268          *返回值:                                                                *
 269          *           0 ;设置成功                                                 *
 270          *           1 ;设置失败                                                 *
 271          *说明:设置CAN节点的通讯对象，允许接收的报文,是由AMR和ACR共同决定的.     *
 272          *************************************************************************/ 
 273          bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3,BCAN_AMR0,BCAN_AMR1,BCAN_AMR2,B
             -CAN_AMR3)
 274          {
 275   1        SJA_BCANAdr=REG_TXBuffer1;     
 276   1      
 277   1        *SJA_BCANAdr=BCAN_ACR0;        //写入参数
 278   1         
 279   1        SJA_BCANAdr=REG_TXBuffer2;
 280   1        *SJA_BCANAdr=BCAN_ACR1;
 281   1      
 282   1        SJA_BCANAdr=REG_TXBuffer3;  
 283   1        *SJA_BCANAdr=BCAN_ACR2;
 284   1         
 285   1        SJA_BCANAdr=REG_TXBuffer4; 
 286   1        *SJA_BCANAdr=BCAN_ACR3;  
 287   1       
 288   1        //校验写入值
 289   1        if(*SJA_BCANAdr != BCAN_ACR3)  return 1; 
 290   1        
 291   1        SJA_BCANAdr=REG_TXBuffer5;      
 292   1      
 293   1        *SJA_BCANAdr=BCAN_AMR0;     //写入参数
 294   1        
 295   1        SJA_BCANAdr=REG_TXBuffer6;         
 296   1        *SJA_BCANAdr=BCAN_AMR1;
 297   1      
 298   1        SJA_BCANAdr=REG_TXBuffer7; 
 299   1        *SJA_BCANAdr=BCAN_AMR2;
 300   1      
 301   1        SJA_BCANAdr=REG_TXBuffer8; 
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 6   

 302   1        *SJA_BCANAdr=BCAN_AMR3;
 303   1        //校验写入值
 304   1        if(*SJA_BCANAdr != BCAN_AMR3) return 1; 
 305   1      
 306   1        return 0;
 307   1      } 
 308          
 309          /************************************************************************
 310          ;*函数原型:  bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)          *
 311          ;*返回值:                                                               *
 312          ;*           0 ;波特率设置成功                                          *
 313          ;*           1 ;波特率设置失败                                          *
 314          ;*                                                                      * 
 315          ;*说明:设置CAN控制器SJA1000通讯波特率.SJA1000的晶振必须为16MHZ,         *
 316          ;*     其它晶体的频率的值的波特率，需自己计算 。该子程序只能用于        *
 317          ;*     复位模式                                                         *  
 318          ;************************************************************************/ 
 319          bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)         //波特率选择
 320          {
 321   1           unsigned char BR_Num= CAN_ByteRate,BTR0_num,BTR1_num;
 322   1             switch (BR_Num)
 323   1              {
 324   2                case ByteRate_10k:
 325   2                     BTR0_num=0xef;
 326   2                     BTR1_num=0xff;
 327   2                     break;
 328   2                case ByteRate_40k  :
 329   2                     BTR0_num=0x87;
 330   2                     BTR1_num=0xff;
 331   2                     break;
 332   2                case ByteRate_50k:
 333   2                     //BTR0_num=0x47;
 334   2                     //BTR1_num=0x2f;
 335   2                     BTR0_num=0x0e;
 336   2                     BTR1_num=0x1c;
 337   2                     break;
 338   2                case ByteRate_80k  :
 339   2                     //BTR0_num=0x83;
 340   2                     //BTR1_num=0xff;
 341   2                     BTR0_num=0x49;                      //ok
 342   2                     BTR1_num=0x1b;
 343   2                     break;
 344   2                case ByteRate_100k  :
 345   2                     //BTR0_num=0x43;
 346   2                     //BTR1_num=0x2f;
 347   2                     BTR0_num=0x04;                       //ok
 348   2                     BTR1_num=0x1c;
 349   2                     break;
 350   2                case ByteRate_125k  :                      //SJA1000的晶振为必须为16MHZ,波特率设置为125kpbs
 351   2                     BTR0_num=0x03;
 352   2                     BTR1_num=0x1c;
 353   2                     //BTR0_num=0x44;                        //ok
 354   2                     //BTR1_num=0x1f;
 355   2                     break;
 356   2                case ByteRate_200k  ://24MHZ
 357   2                  //   BTR0_num=0xc5;  //
 358   2                   //  BTR1_num=0xa5;
 359   2                     BTR0_num=0x43;                        //ok
 360   2                     BTR1_num=0x1b;
 361   2                     break;
 362   2                case ByteRate_250k  ://24MHZ
 363   2                  //   BTR0_num=0xc5;  //
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 7   

 364   2                   //  BTR1_num=0xa5;
 365   2                     BTR0_num=0x01;                        //ok
 366   2                     BTR1_num=0x1c;
 367   2                     break;
 368   2                /* case ByteRate_200k  ://24MHZ
 369   2                     BTR0_num=0x81;
 370   2                     BTR1_num=0xFA;
 371   2                     break;*/
 372   2                case ByteRate_400k  :
 373   2                     BTR0_num=0x80;
 374   2                     BTR1_num=0xfa;
 375   2                     break;
 376   2                case ByteRate_500k  :
 377   2                     BTR0_num=0x01;
 378   2                     BTR1_num=0x1c;
 379   2                     break;
 380   2                case ByteRate_800k  :
 381   2                     BTR0_num=0x00;
 382   2                     BTR1_num=0x16;
 383   2                     break;
 384   2                case ByteRate_1000k  :
 385   2                     BTR0_num=0x00;
 386   2                     BTR1_num=0x14;
 387   2                     break;
 388   2                default :
 389   2                     return 1;
 390   2                     break;
 391   2              }
 392   1      
 393   1          SJA_BCANAdr=REG_BTR0;
 394   1          *SJA_BCANAdr=BTR0_num;
 395   1          if(*SJA_BCANAdr!=BTR0_num)
 396   1            {return 1;}
 397   1          SJA_BCANAdr=REG_BTR1;
 398   1          *SJA_BCANAdr=BTR1_num;
 399   1          if(*SJA_BCANAdr!=BTR1_num)
 400   1            {return 1;}
 401   1          return 0;
 402   1      }
 403          /************************************************************************
 404           *函数原型: bit BCAN_SET_CONTROL(unsigend char CMD)                     *
 405           *参数说明: 设置控制寄存器                                              *
 406           ************************************************************************/
 407          bit BCAN_SET_CONTROL(unsigned char CMD)
 408          {  unsigned char TempData;
 409   1       
 410   1        SJA_BCANAdr=REG_CONTROL;   //SJA_BaseAdr+0x00  控制寄存器
 411   1        TempData=  *SJA_BCANAdr; 
 412   1       
 413   1        *SJA_BCANAdr=CMD;
 414   1       
 415   1        if (*SJA_BCANAdr == CMD)
 416   1          return 0;
 417   1        else
 418   1          return 1;
 419   1      
 420   1      }
 421          /************************************************************************
 422           *函数原型:  bit   BCAN_CREATE_COMMUNATION(void)                        * 
 423           *参数说明:  无                                                         *
 424           *返回值:                                                               *
 425           *           0 ; 表示SJA1000接口正常                                    *
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 8   

 426           *           1 ; 表示SJA1000与处理器接口不正常                          *
 427           *说明:该函数用于检测CAN控制器的接口是否正常                            *
 428           ************************************************************************/
 429           bit BCAN_CREATE_COMMUNATION(void)
 430           {  
 431   1          SJA_BCANAdr=REG_TEST;      
 432   1          *SJA_BCANAdr=0xaa;       //写入测试值
 433   1          if(*SJA_BCANAdr == 0xaa)
 434   1             return 0;            //读测试正确
 435   1          else
 436   1             return 1;
 437   1           
 438   1       }
 439          
 440           /************************************************************************
 441           *函数原型:      bit   BCAN_ENTER_RETMODEL(void)                        *
 442           *参数说明:  无                                                         *
 443           *返回值:                                                               *
 444           *           0 ; 表示成功进入复位工作模式                               *
 445           *           1 ; 表示不能进入复位工作模式                               *
 446           *                                                                      * 
 447           *说明:      CAN控制器进入复位工作模式                                  *
 448           ************************************************************************/ 
 449           bit   BCAN_ENTER_RETMODEL(void)     //置位复位请求
 450           {
 451   1          unsigned   char   TempData;
 452   1          SJA_BCANAdr  = REG_CONTROL;   
 453   1      
 454   1        TempData=  *SJA_BCANAdr;       
 455   1          *SJA_BCANAdr=0x01;                 //置位复位请求 和单滤波模式
 456   1          if((*SJA_BCANAdr&0x01) == 1)
 457   1           return   0;
 458   1          else
 459   1            return   1;   
 460   1       } 
 461          /************************************************************************
 462           *函数原型:   BCAN_CMD_PRG(unsigned char cmd)                           *
 463           *参数说明:  unsigned char cmd                                          *
 464           *返回值:                                                               *
 465           *           0 ; 请求成功                                               *
 466           *           1 ; 请求失败                                               *
 467           *                                                                      * 
 468           *说明:      启动命令字                                                 *
 469           ************************************************************************/
 470          bit  BCAN_CMD_PRG(unsigned char cmd)
 471           {
 472   1         SJA_BCANAdr=REG_COMMAND;            //访问地址指向命令寄存器
 473   1         *SJA_BCANAdr=cmd;                   //启动命令字
 474   1       
 475   1         switch(cmd)
 476   1         {    case  TR_CMD:                    
 477   2      
 478   2                 return    0;
 479   2                 break;
 480   2      
 481   2        case  SRR_CMD:      
 482   2      
 483   2            return 0;
 484   2           break;
 485   2          
 486   2        case  AT_CMD:                  
 487   2      
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 9   

 488   2                  SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 489   2                 if((*SJA_BCANAdr & 0x20)==0) //判断是否正在发送
 490   2                   return  0;
 491   2                 else
 492   2                   return  1;              
 493   2                 break; 
 494   2           case  RRB_CMD:                   
 495   2                 SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 496   2                 if((*SJA_BCANAdr & 0x01)==1)
 497   2                    return  1;
 498   2                 else           
 499   2                    return  0;               
 500   2                 break;  
 501   2           case  COS_CMD:                  
 502   2      
 503   2                 SJA_BCANAdr = REG_STATUS;   
 504   2                 if((*SJA_BCANAdr & 0x02)==0)//判断清除超载是否成功
 505   2                   return  0; 
 506   2                 else
 507   2                   return  1;             
 508   2                 break; 
 509   2           default:
 510   2                   return  1;
 511   2                   break; 
 512   2         }
 513   1      }
 514          
 515          
 516          unsigned char BCAN_DATA_WRITE(unsigned char *SendDataBuf)
 517           {  unsigned char temp;
 518   1         
 519   1          SJA_BCANAdr = REG_STATUS;    
 520   1          temp=*SJA_BCANAdr;
 521   1      
 522   1          if ((temp&0x08)==0) return  1;    //上次发送未完成
 523   1          if ((temp&0x04)==0) return  2;    //发送缓冲区是否锁定 
 524   1          if ((temp&0x10)==0x10) return 3;  //判断是否正在接收   
 525   1      
 526   1          SJA_BCANAdr = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 527   1      
 528   1          memcpy(SJA_BCANAdr,SendDataBuf,4);   
 529   1          BCAN_CMD_PRG(TR_CMD);             //请求发送         
 530   1          return 0;
 531   1      }
 532          
 533          //CAN发送任意长度字节
 534          void CAN_Send_anylength(unsigned char *CAN_TX_Buf, unsigned char length1, unsigned char com)
 535          {
 536   1              unsigned char temptt;
 537   1              loop:
 538   1          SJA_BCANAdr = REG_STATUS;    
 539   1               temptt=*SJA_BCANAdr; 
 540   1              //temptt=Read_SJA1000(REG_STATUS);
 541   1              if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 542   1              //可以向发送缓冲器写数据
 543   1              {
 544   2          SJA_BCANAdr  = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 545   2          *SJA_BCANAdr = length1 + 1;  
 546   2          SJA_BCANAdr  = REG_RXBuffer2;      //访问地址指向发送缓冲区1,修改成头文件
 547   2          *SJA_BCANAdr = MASTER_ADDRESS;  
 548   2          SJA_BCANAdr  = REG_RXBuffer3;     //访问地址指向发送缓冲区1,修改成头文件
 549   2          *SJA_BCANAdr = MACHINE_ADDRESS;
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 10  

 550   2          SJA_BCANAdr  = REG_RXBuffer4;
 551   2          *SJA_BCANAdr = com;
 552   2          SJA_BCANAdr  = REG_RXBuffer5;
 553   2          memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);   
 554   2              //数据发送请求
 555   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 556   2              }
 557   1      }
 558          
 559          //CAN发送一个字节
 560          void CAN_Send_onebyte(unsigned char CAN_TX_data, unsigned char com)
 561          {
 562   1              unsigned char temptt;
 563   1              loop:
 564   1          SJA_BCANAdr = REG_STATUS;    
 565   1               temptt=*SJA_BCANAdr; 
 566   1              //temptt=Read_SJA1000(REG_STATUS);
 567   1              if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 568   1              //可以向发送缓冲器写数据
 569   1              {
 570   2          SJA_BCANAdr  = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 571   2          *SJA_BCANAdr = 2;  
 572   2          SJA_BCANAdr  = REG_RXBuffer2;      //访问地址指向发送缓冲区1,修改成头文件
 573   2          *SJA_BCANAdr = MASTER_ADDRESS;  
 574   2           SJA_BCANAdr = REG_RXBuffer3;     //访问地址指向发送缓冲区1,修改成头文件
 575   2          *SJA_BCANAdr = MACHINE_ADDRESS;
 576   2          SJA_BCANAdr  = REG_RXBuffer4;
 577   2          *SJA_BCANAdr = com;
 578   2          //memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);
 579   2          SJA_BCANAdr  = REG_RXBuffer5;
 580   2          *SJA_BCANAdr=CAN_TX_data; 
 581   2              //数据发送请求
 582   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 583   2              }
 584   1      }
 585          
 586          
 587          /****************************************************
 588          **函数原型：   bit Sja_1000_Init(void)
 589          **功    能：   初始化SJA10000
 590          **入口参数:    无 
 591          **返 回 值:     
 592                0： 初始化成功 
 593                1： 复位失败 
 594                2:  测试sja1000失败 
 595                3： 设置失败 
 596                4： 设置验收滤波器失败
 597                5： 设置波特率失败     
 598          *****************************************************/
 599          unsigned char Sja_1000_Init(void)
 600          {
 601   1              bit s; 
 602   1              EA=0;                                 //关总中断
 603   1              
 604   1              s=BCAN_ENTER_RETMODEL();
 605   1              if (s==1) return 1; 
 606   1              
 607   1              s=BCAN_CREATE_COMMUNATION();       //建立通信
 608   1              if (s==1) return 2;
 609   1      
 610   1              s=BCAN_SET_OUTCLK(0xC8);             //Pelican
 611   1              if (s==1) return 3;
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 11  

 612   1      
 613   1              //s=BCAN_SET_OBJECT(0xFF,0x4E,0x16,0x00,0xff,0xff,0xff,0xff);//屏蔽寄存器，都设为无关，接收所有报文
 614   1        //s=BCAN_SET_OBJECT(0x01,0xe0,0x02,0xe0,0x00,0x0f,0x00,0x0f);//屏蔽寄存器，都设为无关，接收所有报文 
 615   1             //当屏蔽位为1，不滤波，0就滤波必须相等
 616   1        s=BCAN_SET_OBJECT(MACHINE_ADDRESS,MASTER_ADDRESS,MACHINE_ADDRESS,MASTER_ADDRESS,0X00,0X00,0X00,0X00);
 617   1              //s=BCAN_SET_OBJECT(0x55,0xe0,0xaa,0xa1,0x00,0x00,0xff,0xff);//验收码&屏蔽码
 618   1              if (s==1) return 4;
 619   1      
 620   1              s=BCAN_SET_BANDRATE(ByteRate_125k);    //设置波特率125K 16MHZ
 621   1              if (s==1) return 5;
 622   1          
 623   1              SJA_BCANAdr=REG_OCR ;                  //输出控制寄存器  
 624   1              *SJA_BCANAdr=0x1a;        
 625   1              SJA_BCANAdr=REG_INTENABLE;      
 626   1              *SJA_BCANAdr=0x1D;                  //设置中断，接收和发送中断
 627   1          
 628   1              SJA_BCANAdr=REG_CONTROL;            //退出 复位模式
 629   1              *SJA_BCANAdr=*SJA_BCANAdr&0xfe;
 630   1              if(*SJA_BCANAdr!=0x00)
 631   1              return 6;
 632   1      
 633   1              EA=1;
 634   1              return 0;   
 635   1      } 
 636          
 637          /****************************************************
 638          **函数原型：  void AnsData(unsigned char com)
 639          **功    能：  应答数据
 640          **入口参数:   unsigned char com 接收到的命令
 641          **出口参数:   无  
 642          **说    明:   根据接收到的命令做相应的应答          
 643          *****************************************************/
 644          void AnsData(unsigned char com)
 645          {
 646   1          switch (com)
 647   1          {
 648   2            case 0x81:CAN_Send_onebyte(10, ANS_COMMAND_MODULE_STATUS);break;
 649   2            case 0x82:CAN_Send_onebyte(11, ANS_COMMAND_SET_PARAM);break;
 650   2            case 0x83:CAN_Send_onebyte(12, ANS_COMMAND_MODULE_PARAM);break;
 651   2            case 0x84:CAN_Send_onebyte(13, ANS_COMMAND_SET_ONOFF);break;
 652   2            case 0x85:CAN_Send_onebyte(14, ANS_COMMAND_SET_RESET);break;
 653   2            default:break;
 654   2          }
 655   1          //display(11);
 656   1      }
 657          
 658          /****************************************************
 659          **函数原型：  void ex0_int(void) interrupt 0 //using 1
 660          **功    能：  中断接收函数
 661          **入口参数:   无 
 662          **出口参数:   RevceData[]数组   
 663          **说    明:   当sja1000 收到正确的报文时,会产生int中断           
 664          *****************************************************/
 665          void ex0_int(void) interrupt 0 using 1
 666          {  
 667   1              unsigned char tt,tt1,length,com = 0;
 668   1       
 669   1              SJA_BCANAdr=REG_INTERRUPT;
 670   1              if((*SJA_BCANAdr)&0x01)                   //产生了接收中断
 671   1              {  
 672   2                      SJA_BCANAdr=REG_RXBuffer1;
 673   2                      tt=*SJA_BCANAdr;
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 12  

 674   2                      tt1=*SJA_BCANAdr;
 675   2                      length=tt1&0x0F;
 676   2                      if ((tt&0x40)!=0x40)                   //数据帧   = 为远程帧
 677   2                      {  
 678   3                              SJA_BCANAdr = REG_RXBuffer4;              //宏定义的变量不能memcpy(RevceData,REG_RXBuffer4,8);
 679   3              com = *SJA_BCANAdr;
 680   3              SJA_BCANAdr = REG_RXBuffer5;
 681   3              memcpy(RevceData,SJA_BCANAdr,length - 1);    //功能：由src所指内存区域复制count个字节到dest所指内存
             -区域
 682   3                              display(RevceData[0]);
 683   3              AnsData(com);                  // 根据命令应答
 684   3                      }
 685   2                      BCAN_CMD_PRG(RRB_CMD);                  //释放SJA1000接收缓冲区，****已经修改
 686   2              }
 687   1      } 
 688          
 689          /****************************************************
 690          **函数原型：   void main(void)
 691          **功    能：   主程序部分:
 692          **入口参数:    无 
 693          **返 回 值:     
 694          *****************************************************/
 695          void main(void)
 696          {  
 697   1              unsigned char ss;
 698   1              unsigned char num=0;
 699   1      
 700   1              CS=0;                //片选择引脚
 701   1              EA=0;
 702   1              
 703   1              Init_Cpu(); 
 704   1              InitUART();     //初始化串口 
 705   1      
 706   1              
 707   1              ss=Sja_1000_Init();  //初始化SJA1000     
 708   1         
 709   1              if (ss!=0)             //初始化失败
 710   1              {
 711   2                      SendStr("Sja_1000_Init() failure");              //测试专用发送到串口看状态
 712   2          display(ss);                                      // 显示错误信息
 713   2              }
 714   1              else
 715   1              {
 716   2                      SendStr("Sja_1000_Init() sucess");  
 717   2          EA=1; //初始化成功，开总中断
 718   2          display(10);      //显示该板号A 
 719   2        }
 720   1      
 721   1              while(1) 
 722   1              {                    
 723   2              }   
 724   1      }
 725          
 726          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1221    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      26
C51 COMPILER V9.52.0.0   SERVANT                                                           05/27/2016 08:53:30 PAGE 13  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
